"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[2224],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(t),f=o,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||a;return t?r.createElement(m,c(c({ref:n},u),{},{components:t})):r.createElement(m,c({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1712:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),c=["components"],i={sidebar_label:"ERC-1155",sidebar_position:5},s="ERC-1155",l={unversionedId:"developing-contracts/examples/erc1155",id:"developing-contracts/examples/erc1155",title:"ERC-1155",description:"Introduction",source:"@site/docs/developing-contracts/examples/erc1155.md",sourceDirName:"developing-contracts/examples",slug:"/developing-contracts/examples/erc1155",permalink:"/developing-contracts/examples/erc1155",editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/developing-contracts/examples/erc1155.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"ERC-1155",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"ERC-721: NFT",permalink:"/developing-contracts/examples/erc-721"},next:{title:"Gear Feeds",permalink:"/developing-contracts/examples/feeds"}},u={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Interface",id:"interface",level:2},{value:"Events",id:"events",level:3},{value:"Functions",id:"functions",level:3},{value:"Init Config",id:"init-config",level:3},{value:"<code>Action</code> Structure",id:"action-structure",level:3},{value:"<code>Event</code> Structure",id:"event-structure",level:3},{value:"Conclusion",id:"conclusion",level:2}],d={toc:p};function f(e){var n=e.components,t=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"erc-1155"},"ERC-1155"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"A standard interface for contracts that manage multiple token types. A single deployed contract may include any combination of fungible tokens, non-fungible tokens or other configurations (e.g. semi-fungible tokens)."),(0,a.kt)("p",null,"The idea is simple and seeks to create a smart contract interface that can represent and control any number of fungible and non-fungible token types. In this way, the ERC-1155 token can do the same functions as an ERC-20 and ERC-721 token, and even both at the same time."),(0,a.kt)("h2",{id:"interface"},"Interface"),(0,a.kt)("h3",{id:"events"},"Events"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"// `TransferSingle` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning\nTransferSingle {\n    operator: ActorId,\n    from: ActorId,\n    to: ActorId,\n    id: u128,\n    amount: u128,\n}\n\n// `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning\nTransferBatch {\n    operator: ActorId,\n    from: ActorId,\n    to: ActorId,\n    ids: Vec<u128>,\n    values: Vec<u128>,\n}\n\n// MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absence of an event assumes disabled)\nApprovalForAll {\n    owner: ActorId,\n    operator: ActorId,\n    approved: bool,\n}\n")),(0,a.kt)("h3",{id:"functions"},"Functions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"// Get the balance of an account's tokens\nfn balance_of(&self, account: &ActorId, id: &u128) -> u128;\n\n// Get the balance of multiple account/token pairs\nfn balance_of_batch(&self, accounts: &[ActorId], ids: &[u128]) -> Vec<BalanceOfBatchReply>;\n\n// Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens, and MUST emit the ApprovalForAll event\nfn set_approval_for_all(&mut self, operator: &ActorId, approved: bool);\n\n// Queries the approval status of an operator for a given owner\nfn is_approved_for_all(&mut self, account: &ActorId, operator: &ActorId) -> &bool;\n\n// Transfers amount of tokens from address to other address, and MUST emit the TransferSingle event\nfn safe_transfer_from(&mut self, from: &ActorId, to: &ActorId, id: &u128, amount: u128);\n\n// Transfers  multiple type amount of tokens from address to other address, and MUST emit the TransferBatch event\nfn safe_batch_transfer_from(&mut self, from: &ActorId, to: &ActorId, ids: &[u128], amounts: &[u128]);\n")),(0,a.kt)("h3",{id:"init-config"},"Init Config"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct InitConfig {\n    pub name: String,\n    pub symbol: String,\n    pub base_uri: String,\n}\n")),(0,a.kt)("h3",{id:"action-structure"},(0,a.kt)("inlineCode",{parentName:"h3"},"Action")," Structure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Decode, Encode, TypeInfo)]\npub enum Action {\n    Mint(ActorId, u128, u128),\n    BalanceOf(ActorId, u128),\n    BalanceOfBatch(Vec<ActorId>, Vec<u128>),\n    MintBatch(ActorId, Vec<u128>, Vec<u128>),\n    SafeTransferFrom(ActorId, ActorId, u128, u128),\n    SafeBatchTransferFrom(ActorId, ActorId, Vec<u128>, Vec<u128>),\n    SetApprovalForAll(ActorId, bool),\n    IsApprovedForAll(ActorId, ActorId),\n    BurnBatch(Vec<u128>, Vec<u128>),\n    OwnerOf(u128),\n    OwnerOfBatch(Vec<u128>),\n}\n")),(0,a.kt)("h3",{id:"event-structure"},(0,a.kt)("inlineCode",{parentName:"h3"},"Event")," Structure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum Event {\n    TransferSingle(TransferSingleReply),\n    Balance(u128),\n    BalanceOfBatch(Vec<BalanceOfBatchReply>),\n    MintOfBatch(Vec<BalanceOfBatchReply>),\n    TransferBatch {\n        operator: ActorId,\n        from: ActorId,\n        to: ActorId,\n        ids: Vec<u128>,\n        values: Vec<u128>,\n    },\n    ApprovalForAll {\n        owner: ActorId,\n        operator: ActorId,\n        approved: bool,\n    },\n}\n\n#[derive(Debug, Decode, Encode, TypeInfo)]\npub struct TransferSingleReply {\n    pub operator: ActorId,\n    pub from: ActorId,\n    pub to: ActorId,\n    pub id: u128,\n    pub amount: u128,\n}\n\n#[derive(Debug, Encode, Decode, TypeInfo)]\npub struct BalanceOfBatchReply {\n    pub account: ActorId,\n    pub id: u128,\n    pub amount: u128,\n}\n")),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"A source code of the contract example provided by Gear is available on GitHub: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/apps/blob/master/erc1155/src/lib.rs"},(0,a.kt)("inlineCode",{parentName:"a"},"erc1155/src/lib.rs")),"."),(0,a.kt)("p",null,"See also an example of the smart contract testing implementation based on gtest: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/apps/blob/master/erc1155/tests/tests.rs"},(0,a.kt)("inlineCode",{parentName:"a"},"erc1155/tests/tests.rs")),"."),(0,a.kt)("p",null,"For more details about testing smart contracts written on Gear, refer to this article: ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.gear-tech.io/developing-contracts/testing"},"Program testing"),"."))}f.isMDXComponent=!0}}]);