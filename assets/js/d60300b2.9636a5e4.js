"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[5167],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return g}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=p(n),g=o,d=m["".concat(c,".").concat(g)]||m[g]||u[g]||s;return n?r.createElement(d,a(a({ref:t},l),{},{components:n})):r.createElement(d,a({ref:t},l))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var p=2;p<s;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6860:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var r=n(7462),o=n(3366),s=(n(7294),n(3905)),a=["components"],i={sidebar_label:"PING-PONG",sidebar_position:2},c="PING-PONG",p={unversionedId:"developing-contracts/examples/ping",id:"developing-contracts/examples/ping",title:"PING-PONG",description:"Gear is very easy to write code for!",source:"@site/docs/developing-contracts/examples/ping.md",sourceDirName:"developing-contracts/examples",slug:"/developing-contracts/examples/ping",permalink:"/developing-contracts/examples/ping",editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/developing-contracts/examples/ping.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"PING-PONG",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Prerequisites",permalink:"/developing-contracts/examples/prerequisites"},next:{title:"ERC-20",permalink:"/developing-contracts/examples/erc20"}},l={},u=[],m={toc:u};function g(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"ping-pong"},"PING-PONG"),(0,s.kt)("p",null,"Gear is very easy to write code for!"),(0,s.kt)("p",null,"Here is a minimal program for a classic ping-pong contract:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'#![no_std]\n\nuse gstd::{debug, msg, prelude::*};\n\nstatic mut MESSAGE_LOG: Vec<String> = vec![];\n\n#[no_mangle]\npub unsafe extern "C" fn handle() {\n    let new_msg = String::from_utf8(msg::load_bytes()).expect("Invalid message");\n\n    if new_msg == "PING" {\n        msg::reply_bytes("PONG", 0).unwrap();\n    }\n\n    MESSAGE_LOG.push(new_msg);\n\n    debug!("{:?} total message(s) stored: ", MESSAGE_LOG.len());\n\n    for log in MESSAGE_LOG.iter() {\n        debug!(log);\n    }\n}\n\n/// and a simple unit test:\n\n#[cfg(test)]\nmod tests {\n    extern crate std;\n\n    use gtest::{Log, Program, System};\n\n    #[test]\n    fn it_works() {\n        let system = System::new();\n        system.init_logger();\n\n        let program = Program::current(&system);\n\n        let res = program.send_bytes(42, "INIT");\n        assert!(res.log().is_empty());\n\n        let res = program.send_bytes(42, "PING");\n        let log = Log::builder().source(1).dest(42).payload_bytes("PONG");\n        assert!(res.contains(&log));\n    }\n}\n')),(0,s.kt)("p",null,"It will just send ",(0,s.kt)("inlineCode",{parentName:"p"},"PONG")," back to the original sender (this can be you!)."),(0,s.kt)("p",null,"GitHub link: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/apps/tree/master/ping"},"https://github.com/gear-tech/apps/tree/master/ping")))}g.isMDXComponent=!0}}]);