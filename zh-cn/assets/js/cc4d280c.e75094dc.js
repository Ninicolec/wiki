"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[9602],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),i=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=i(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=i(t),f=o,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||a;return t?r.createElement(m,c(c({ref:n},u),{},{components:t})):r.createElement(m,c({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,c[1]=l;for(var i=2;i<a;i++)c[i]=t[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3215:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return p}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),c=["components"],l={sidebar_label:"ERC-1155",sidebar_position:5},s="ERC-1155",i={unversionedId:"developing-contracts/examples/erc1155",id:"developing-contracts/examples/erc1155",title:"ERC-1155",description:"\u7b80\u4ecb",source:"@site/i18n/zh-cn/docusaurus-plugin-content-docs/current/developing-contracts/examples/erc1155.md",sourceDirName:"developing-contracts/examples",slug:"/developing-contracts/examples/erc1155",permalink:"/zh-cn/developing-contracts/examples/erc1155",editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/developing-contracts/examples/erc1155.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"ERC-1155",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"ERC-721: NFT",permalink:"/zh-cn/developing-contracts/examples/erc-721"},next:{title:"Gear Feeds",permalink:"/zh-cn/developing-contracts/examples/feeds"}},u={},p=[{value:"\u7b80\u4ecb",id:"\u7b80\u4ecb",level:2},{value:"\u63a5\u53e3",id:"\u63a5\u53e3",level:2},{value:"\u4e8b\u4ef6",id:"\u4e8b\u4ef6",level:3},{value:"\u65b9\u6cd5",id:"\u65b9\u6cd5",level:3},{value:"Init Config",id:"init-config",level:3},{value:"<code>Action</code> \u7ed3\u6784",id:"action-\u7ed3\u6784",level:3},{value:"<code>Event</code> \u7ed3\u6784",id:"event-\u7ed3\u6784",level:3},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2}],d={toc:p};function f(e){var n=e.components,t=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"erc-1155"},"ERC-1155"),(0,a.kt)("h2",{id:"\u7b80\u4ecb"},"\u7b80\u4ecb"),(0,a.kt)("p",null,"ERC1155 \u7528\u4e8e\u7ba1\u7406\u591a\u79cd\u4ee3\u5e01\u7c7b\u578b\u7684\u5408\u540c\u7684\u6807\u51c6\u63a5\u53e3\u3002\u5355\u4e2a\u90e8\u7f72\u7684\u5408\u7ea6\u53ef\u4ee5\u5305\u62ec\u53ef\u66ff\u4ee3\u4ee3\u5e01\u3001\u4e0d\u53ef\u66ff\u4ee3\u4ee3\u5e01\u6216\u5176\u4ed6\u914d\u7f6e\uff08\u5982\u534a\u53ef\u66ff\u4ee3\u4ee3\u5e01\uff09\u7684\u4efb\u4f55\u7ec4\u5408\u3002"),(0,a.kt)("p",null,"\u8fd9\u4e2a\u60f3\u6cd5\u5f88\u7b80\u5355\uff0c\u65e8\u5728\u521b\u5efa\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u63a5\u53e3\uff0c\u53ef\u4ee5\u8868\u793a\u548c\u63a7\u5236\u4efb\u4f55\u6570\u91cf\u7684\u53ef\u66ff\u4ee3\u548c\u4e0d\u53ef\u66ff\u4ee3\u7684\u4ee3\u5e01\u7c7b\u578b\u3002\u8fd9\u6837\u4e00\u6765\uff0cERC-1155\u4ee3\u5e01\u53ef\u4ee5\u505a\u4e0eERC-20\u548cERC-721\u4ee3\u5e01\u76f8\u540c\u7684\u529f\u80fd\uff0c\u751a\u81f3\u53ef\u4ee5\u540c\u65f6\u517c\u5bb9\u4e24\u8005\u3002"),(0,a.kt)("h2",{id:"\u63a5\u53e3"},"\u63a5\u53e3"),(0,a.kt)("h3",{id:"\u4e8b\u4ef6"},"\u4e8b\u4ef6"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"// `TransferSingle` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning\nTransferSingle {\n    operator: ActorId,\n    from: ActorId,\n    to: ActorId,\n    id: u128,\n    amount: u128,\n}\n\n// `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning\nTransferBatch {\n    operator: ActorId,\n    from: ActorId,\n    to: ActorId,\n    ids: Vec<u128>,\n    values: Vec<u128>,\n}\n\n// MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absence of an event assumes disabled)\nApprovalForAll {\n    owner: ActorId,\n    operator: ActorId,\n    approved: bool,\n}\n")),(0,a.kt)("h3",{id:"\u65b9\u6cd5"},"\u65b9\u6cd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"// Get the balance of an account's tokens\nfn balance_of(&self, account: &ActorId, id: &u128) -> u128;\n\n// Get the balance of multiple account/token pairs\nfn balance_of_batch(&self, accounts: &[ActorId], ids: &[u128]) -> Vec<BalanceOfBatchReply>;\n\n// Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens, and MUST emit the ApprovalForAll event\nfn set_approval_for_all(&mut self, operator: &ActorId, approved: bool);\n\n// Queries the approval status of an operator for a given owner\nfn is_approved_for_all(&mut self, account: &ActorId, operator: &ActorId) -> &bool;\n\n// Transfers amount of tokens from address to other address, and MUST emit the TransferSingle event\nfn safe_transfer_from(&mut self, from: &ActorId, to: &ActorId, id: &u128, amount: u128);\n\n// Transfers  multiple type amount of tokens from address to other address, and MUST emit the TransferBatch event\nfn safe_batch_transfer_from(&mut self, from: &ActorId, to: &ActorId, ids: &[u128], amounts: &[u128]);\n")),(0,a.kt)("h3",{id:"init-config"},"Init Config"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct InitConfig {\n    pub name: String,\n    pub symbol: String,\n    pub base_uri: String,\n}\n")),(0,a.kt)("h3",{id:"action-\u7ed3\u6784"},(0,a.kt)("inlineCode",{parentName:"h3"},"Action")," \u7ed3\u6784"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Decode, Encode, TypeInfo)]\npub enum Action {\n    Mint(ActorId, u128, u128),\n    BalanceOf(ActorId, u128),\n    BalanceOfBatch(Vec<ActorId>, Vec<u128>),\n    MintBatch(ActorId, Vec<u128>, Vec<u128>),\n    SafeTransferFrom(ActorId, ActorId, u128, u128),\n    SafeBatchTransferFrom(ActorId, ActorId, Vec<u128>, Vec<u128>),\n    SetApprovalForAll(ActorId, bool),\n    IsApprovedForAll(ActorId, ActorId),\n    BurnBatch(Vec<u128>, Vec<u128>),\n    OwnerOf(u128),\n    OwnerOfBatch(Vec<u128>),\n}\n")),(0,a.kt)("h3",{id:"event-\u7ed3\u6784"},(0,a.kt)("inlineCode",{parentName:"h3"},"Event")," \u7ed3\u6784"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum Event {\n    TransferSingle(TransferSingleReply),\n    Balance(u128),\n    BalanceOfBatch(Vec<BalanceOfBatchReply>),\n    MintOfBatch(Vec<BalanceOfBatchReply>),\n    TransferBatch {\n        operator: ActorId,\n        from: ActorId,\n        to: ActorId,\n        ids: Vec<u128>,\n        values: Vec<u128>,\n    },\n    ApprovalForAll {\n        owner: ActorId,\n        operator: ActorId,\n        approved: bool,\n    },\n}\n\n#[derive(Debug, Decode, Encode, TypeInfo)]\npub struct TransferSingleReply {\n    pub operator: ActorId,\n    pub from: ActorId,\n    pub to: ActorId,\n    pub id: u128,\n    pub amount: u128,\n}\n\n#[derive(Debug, Encode, Decode, TypeInfo)]\npub struct BalanceOfBatchReply {\n    pub account: ActorId,\n    pub id: u128,\n    pub amount: u128,\n}\n")),(0,a.kt)("h2",{id:"\u603b\u7ed3"},"\u603b\u7ed3"),(0,a.kt)("p",null,"\u7531 Gear \u63d0\u4f9b\u7684\u667a\u80fd\u5408\u7ea6\u6e90\u7801\u5728 Github \u4e0a\u53ef\u4ee5\u627e\u5230\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/apps/blob/master/erc1155/src/lib.rs"},(0,a.kt)("inlineCode",{parentName:"a"},"erc1155/src/lib.rs"))," \u3002"),(0,a.kt)("p",null,"\u540c\u6837\u53ef\u4ee5\u627e\u5230\u57fa\u4e8e gtest \u5b9e\u73b0\u7684\u667a\u80fd\u5408\u7ea6\u6d4b\u8bd5\u8303\u4f8b\uff1a","[",(0,a.kt)("inlineCode",{parentName:"p"},"erc1155/tests/tests.rs"),"]",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/apps/blob/master/erc1155/tests/tests.rs"},"https://github.com/gear-tech/apps/blob/master/erc1155/tests/tests.rs"),") \u3002"),(0,a.kt)("p",null,"\u66f4\u591a\u5173\u4e8e\u5728 Gear \u4e0a\u6d4b\u8bd5\u667a\u80fd\u5408\u7ea6\u7684\u7ec6\u8282\uff0c\u8bf7\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://wiki.gear-tech.io/zh-cn/developing-contracts/testing/"},"\u5e94\u7528\u6d4b\u8bd5"),"\u3002"))}f.isMDXComponent=!0}}]);